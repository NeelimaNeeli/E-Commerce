(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('@angular/core'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('xng-breadcrumb', ['exports', 'rxjs', 'rxjs/operators', '@angular/common', '@angular/core', '@angular/router'], factory) :
    (factory((global['xng-breadcrumb'] = {}),global.rxjs,global.rxjs.operators,global.ng.common,global.ng.core,global.ng.router));
}(this, (function (exports,rxjs,operators,common,i0,i1) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * This directive is used to customize the breadcrumb label behavior
     * *xngBreadcrumbItem directive can be used in the child element of xng-breadcrumb
     * Usage: refer to demo app.component.html
     */
    var BreadcrumbItemDirective = /** @class */ (function () {
        function BreadcrumbItemDirective() {
        }
        BreadcrumbItemDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[xngBreadcrumbItem]'
                    },] }
        ];
        /** @nocollapse */
        BreadcrumbItemDirective.ctorParameters = function () { return []; };
        return BreadcrumbItemDirective;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BreadcrumbService = /** @class */ (function () {
        function BreadcrumbService(activatedRoute, router) {
            this.activatedRoute = activatedRoute;
            this.router = router;
            this.baseHref = '/';
            /**
             * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.
             * Breadcrumbs can be set from anywhere (component, service) in the app.
             * On every breadcrumb update check this store and use the info if available.
             */
            this.dynamicBreadcrumbStore = [];
            /**
             * breadcrumbList for the current route
             * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected
             * If effected, update the change and emit a new stream
             */
            this.currentBreadcrumbs = [];
            this.previousBreadcrumbs = [];
            /**
             * Breadcrumbs observable to be subscribed by BreadcrumbComponent
             * Emits on every route change OR dynamic update of breadcrumb
             */
            this.breadcrumbs = new rxjs.BehaviorSubject([]);
            this.breadcrumbs$ = this.breadcrumbs.asObservable();
            this.pathParamPrefix = ':';
            this.pathParamRegexIdentifier = '/:[^/]+';
            this.pathParamRegexReplacer = '/[^/]+';
            this.setBaseBreadcrumb();
            this.detectRouteChanges();
        }
        /**
         * Update breadcrumb label or options for -
         *
         * route (complete route path). route can be passed the same way you define angular routes
         * 1) update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')
         * 2) change visibility Ex: set('/mentor/:id/edit', { skip: true })
         * 3) add info Ex: set('/mentor/:id/edit', { info: { icon: 'edit', iconColor: 'blue' } })
         * ------------------------ OR -------------------------
         *
         * alias (prefixed with '@'). breadcrumb alias is unique for a route
         * 1) update label Ex: set('@mentor', 'Enabler')
         * 2) change visibility Ex: set('@mentorEdit', { skip: true })
         * 3) add info Ex: set('@mentorEdit', { info: { icon: 'edit', iconColor: 'blue' } })
         */
        /**
         * Update breadcrumb label or options for -
         *
         * route (complete route path). route can be passed the same way you define angular routes
         * 1) update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')
         * 2) change visibility Ex: set('/mentor/:id/edit', { skip: true })
         * 3) add info Ex: set('/mentor/:id/edit', { info: { icon: 'edit', iconColor: 'blue' } })
         * ------------------------ OR -------------------------
         *
         * alias (prefixed with '\@'). breadcrumb alias is unique for a route
         * 1) update label Ex: set('\@mentor', 'Enabler')
         * 2) change visibility Ex: set('\@mentorEdit', { skip: true })
         * 3) add info Ex: set('\@mentorEdit', { info: { icon: 'edit', iconColor: 'blue' } })
         * @param {?} pathOrAlias
         * @param {?} breadcrumb
         * @return {?}
         */
        BreadcrumbService.prototype.set = /**
         * Update breadcrumb label or options for -
         *
         * route (complete route path). route can be passed the same way you define angular routes
         * 1) update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')
         * 2) change visibility Ex: set('/mentor/:id/edit', { skip: true })
         * 3) add info Ex: set('/mentor/:id/edit', { info: { icon: 'edit', iconColor: 'blue' } })
         * ------------------------ OR -------------------------
         *
         * alias (prefixed with '\@'). breadcrumb alias is unique for a route
         * 1) update label Ex: set('\@mentor', 'Enabler')
         * 2) change visibility Ex: set('\@mentorEdit', { skip: true })
         * 3) add info Ex: set('\@mentorEdit', { info: { icon: 'edit', iconColor: 'blue' } })
         * @param {?} pathOrAlias
         * @param {?} breadcrumb
         * @return {?}
         */
            function (pathOrAlias, breadcrumb) {
                if (!this.validateArguments(pathOrAlias, breadcrumb)) {
                    return;
                }
                if (typeof breadcrumb === 'string') {
                    breadcrumb = {
                        label: breadcrumb
                    };
                }
                if (pathOrAlias.startsWith('@')) {
                    this.updateStore(__assign({}, breadcrumb, { alias: pathOrAlias.slice(1) }));
                }
                else {
                    /** @type {?} */
                    var breadcrumbExtraProps = this.buildRouteRegExp(pathOrAlias);
                    this.updateStore(__assign({}, breadcrumb, breadcrumbExtraProps));
                }
            };
        /**
         * @private
         * @return {?}
         */
        BreadcrumbService.prototype.setBaseBreadcrumb = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var baseConfig = this.router.config.find(( /**
                 * @param {?} pathConfig
                 * @return {?}
                 */function (pathConfig) { return pathConfig.path === ''; }));
                if (baseConfig && baseConfig.data) {
                    var _a = this.getBreadcrumbOptions(baseConfig.data), label = _a.label, alias = _a.alias, _b = _a.skip, skip = _b === void 0 ? false : _b, info = _a.info, _c = _a.disable, disable = _c === void 0 ? false : _c;
                    /** @type {?} */
                    var isAutoGeneratedLabel = false;
                    if (typeof label !== 'string' && !label) {
                        label = '';
                        isAutoGeneratedLabel = true;
                    }
                    this.baseBreadcrumb = {
                        label: label,
                        alias: alias,
                        skip: skip,
                        disable: disable,
                        info: info,
                        routeLink: this.baseHref,
                        isAutoGeneratedLabel: isAutoGeneratedLabel
                    };
                }
            };
        /**
         * Whenever route changes build breadcrumb list again
         */
        /**
         * Whenever route changes build breadcrumb list again
         * @private
         * @return {?}
         */
        BreadcrumbService.prototype.detectRouteChanges = /**
         * Whenever route changes build breadcrumb list again
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.router.events
                    .pipe(operators.filter(( /**
             * @param {?} event
             * @return {?}
             */function (event) { return event instanceof i1.NavigationEnd; })), operators.distinctUntilChanged())
                    .subscribe(( /**
             * @param {?} event
             * @return {?}
             */function (event) {
                    _this.previousBreadcrumbs = _this.currentBreadcrumbs;
                    _this.currentBreadcrumbs = _this.baseBreadcrumb ? [_this.baseBreadcrumb] : [];
                    _this.prepareBreadcrumbList(_this.activatedRoute.root, _this.baseHref);
                }));
            };
        /**
         * @private
         * @param {?} activatedRoute
         * @param {?} routeLinkPrefix
         * @return {?}
         */
        BreadcrumbService.prototype.prepareBreadcrumbList = /**
         * @private
         * @param {?} activatedRoute
         * @param {?} routeLinkPrefix
         * @return {?}
         */
            function (activatedRoute, routeLinkPrefix) {
                if (activatedRoute.routeConfig && activatedRoute.routeConfig.path) {
                    /** @type {?} */
                    var breadcrumbItem = this.prepareBreadcrumbItem(activatedRoute, routeLinkPrefix);
                    this.currentBreadcrumbs.push(breadcrumbItem);
                    if (activatedRoute.firstChild) {
                        return this.prepareBreadcrumbList(activatedRoute.firstChild, breadcrumbItem.routeLink + '/');
                    }
                }
                else if (activatedRoute.firstChild) {
                    return this.prepareBreadcrumbList(activatedRoute.firstChild, routeLinkPrefix);
                }
                // remove breadcrumb items that needs to be hidden or don't have a label
                /** @type {?} */
                var breadcrumbsToShow = this.currentBreadcrumbs.filter(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return !item.skip; }));
                this.breadcrumbs.next(breadcrumbsToShow);
            };
        /**
         * @private
         * @param {?} activatedRoute
         * @param {?} routeLinkPrefix
         * @return {?}
         */
        BreadcrumbService.prototype.prepareBreadcrumbItem = /**
         * @private
         * @param {?} activatedRoute
         * @param {?} routeLinkPrefix
         * @return {?}
         */
            function (activatedRoute, routeLinkPrefix) {
                var _a = this.parseRouteData(activatedRoute.routeConfig), path = _a.path, breadcrumb = _a.breadcrumb;
                // in case of path param get the resolved for param
                /** @type {?} */
                var resolvedPath = this.resolvePathParam(path, activatedRoute);
                /** @type {?} */
                var routeLink = "" + routeLinkPrefix + resolvedPath;
                var _b = this.getFromStore(breadcrumb.alias, routeLink), label = _b.label, alias = _b.alias, skip = _b.skip, disable = _b.disable, info = _b.info;
                /** @type {?} */
                var isAutoGeneratedLabel = false;
                if (typeof label !== 'string') {
                    if (typeof breadcrumb.label === 'string') {
                        label = breadcrumb.label;
                    }
                    else {
                        label = resolvedPath;
                        isAutoGeneratedLabel = true;
                    }
                }
                return __assign({ label: label, alias: alias || breadcrumb.alias, skip: skip || breadcrumb.skip, disable: disable || breadcrumb.disable, info: info || breadcrumb.info, routeLink: routeLink,
                    isAutoGeneratedLabel: isAutoGeneratedLabel }, this.resolveQueryParam(routeLink, activatedRoute));
            };
        /**
         * For a specific route, breadcrumb can be defined either on parent data OR it's child(which has empty path) data
         * When both are defined, child takes precedence
         *
         * Ex: Below we are setting breadcrumb on both parent and child.
         * So, child takes precedence and "Defined On Child" is displayed for the route 'home'
         * { path: 'home', loadChildren: './home/home.module#HomeModule' , data: {breadcrumb: "Defined On Module"}}
         *                                                AND
         * children: [
         *   { path: '', component: ShowUserComponent, data: {breadcrumb: "Defined On Child" }
         * ]
         */
        /**
         * For a specific route, breadcrumb can be defined either on parent data OR it's child(which has empty path) data
         * When both are defined, child takes precedence
         *
         * Ex: Below we are setting breadcrumb on both parent and child.
         * So, child takes precedence and "Defined On Child" is displayed for the route 'home'
         * { path: 'home', loadChildren: './home/home.module#HomeModule' , data: {breadcrumb: "Defined On Module"}}
         *                                                AND
         * children: [
         *   { path: '', component: ShowUserComponent, data: {breadcrumb: "Defined On Child" }
         * ]
         * @private
         * @param {?} routeConfig
         * @return {?}
         */
        BreadcrumbService.prototype.parseRouteData = /**
         * For a specific route, breadcrumb can be defined either on parent data OR it's child(which has empty path) data
         * When both are defined, child takes precedence
         *
         * Ex: Below we are setting breadcrumb on both parent and child.
         * So, child takes precedence and "Defined On Child" is displayed for the route 'home'
         * { path: 'home', loadChildren: './home/home.module#HomeModule' , data: {breadcrumb: "Defined On Module"}}
         *                                                AND
         * children: [
         *   { path: '', component: ShowUserComponent, data: {breadcrumb: "Defined On Child" }
         * ]
         * @private
         * @param {?} routeConfig
         * @return {?}
         */
            function (routeConfig) {
                var path = routeConfig.path, _a = routeConfig.data, data = _a === void 0 ? {} : _a;
                /** @type {?} */
                var breadcrumb = this.mergeWithBaseChildData(routeConfig, __assign({}, data));
                return { path: path, breadcrumb: breadcrumb };
            };
        /**
         * @private
         * @param {?} breadcrumbAlias
         * @param {?} routeLink
         * @return {?}
         */
        BreadcrumbService.prototype.getFromStore = /**
         * @private
         * @param {?} breadcrumbAlias
         * @param {?} routeLink
         * @return {?}
         */
            function (breadcrumbAlias, routeLink) {
                /** @type {?} */
                var matchingItem;
                if (breadcrumbAlias) {
                    matchingItem = this.dynamicBreadcrumbStore.find(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) { return item.alias === breadcrumbAlias; }));
                }
                if (!matchingItem && routeLink) {
                    matchingItem = this.dynamicBreadcrumbStore.find(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) {
                        return (item.routeLink && item.routeLink === routeLink) || (item.routeRegex && new RegExp(item.routeRegex).test(routeLink + '/'));
                    }));
                }
                return matchingItem || {};
            };
        /**
         * To update breadcrumb label for a route with path param, we need regex that matches route.
         * Instead of user providing regex, we help in preparing regex dynamically
         *
         * Ex: route declaration - path: '/mentor/:id'
         * breadcrumbService.set('/mentor/:id', 'Uday');
         * '/mentor/2' OR 'mentor/ada' we should use 'Uday' as label
         *
         * regex string is built, if route has path params(contains with ':')
         */
        /**
         * To update breadcrumb label for a route with path param, we need regex that matches route.
         * Instead of user providing regex, we help in preparing regex dynamically
         *
         * Ex: route declaration - path: '/mentor/:id'
         * breadcrumbService.set('/mentor/:id', 'Uday');
         * '/mentor/2' OR 'mentor/ada' we should use 'Uday' as label
         *
         * regex string is built, if route has path params(contains with ':')
         * @private
         * @param {?} path
         * @return {?}
         */
        BreadcrumbService.prototype.buildRouteRegExp = /**
         * To update breadcrumb label for a route with path param, we need regex that matches route.
         * Instead of user providing regex, we help in preparing regex dynamically
         *
         * Ex: route declaration - path: '/mentor/:id'
         * breadcrumbService.set('/mentor/:id', 'Uday');
         * '/mentor/2' OR 'mentor/ada' we should use 'Uday' as label
         *
         * regex string is built, if route has path params(contains with ':')
         * @private
         * @param {?} path
         * @return {?}
         */
            function (path) {
                // ensure leading slash is provided in the path
                if (!path.startsWith('/')) {
                    path = '/' + path;
                }
                if (path.includes(this.pathParamPrefix)) {
                    // replace mathing path param with a regex
                    // '/mentor/:id' becomes '/mentor/[^/]', which further will be matched in updateStore
                    /** @type {?} */
                    var routeRegex = path.replace(new RegExp(this.pathParamRegexIdentifier, 'g'), this.pathParamRegexReplacer);
                    return { routeRegex: routeRegex };
                }
                else {
                    return { routeLink: path };
                }
            };
        /**
         * Update current breadcrumb definition and emit a new stream of breadcrumbs
         * Also update the store to reuse dynamic declarations
         */
        /**
         * Update current breadcrumb definition and emit a new stream of breadcrumbs
         * Also update the store to reuse dynamic declarations
         * @private
         * @param {?} breadcrumb
         * @return {?}
         */
        BreadcrumbService.prototype.updateStore = /**
         * Update current breadcrumb definition and emit a new stream of breadcrumbs
         * Also update the store to reuse dynamic declarations
         * @private
         * @param {?} breadcrumb
         * @return {?}
         */
            function (breadcrumb) {
                var _a = this.getBreadcrumbIndexes(breadcrumb), breadcrumbItemIndex = _a.breadcrumbItemIndex, storeItemIndex = _a.storeItemIndex;
                // if breadcrumb is present in current breadcrumbs update it and emit new stream
                if (breadcrumbItemIndex > -1) {
                    this.currentBreadcrumbs[breadcrumbItemIndex] = __assign({}, this.currentBreadcrumbs[breadcrumbItemIndex], breadcrumb);
                    /** @type {?} */
                    var breadcrumbsToShow = this.currentBreadcrumbs.filter(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) { return !item.skip; }));
                    this.breadcrumbs.next(__spread(breadcrumbsToShow));
                }
                // If the store already has this route definition update it, else add
                if (storeItemIndex > -1) {
                    this.dynamicBreadcrumbStore[storeItemIndex] = __assign({}, this.dynamicBreadcrumbStore[storeItemIndex], breadcrumb);
                }
                else {
                    this.dynamicBreadcrumbStore.push(breadcrumb);
                }
            };
        /**
         * @private
         * @param {?} breadcrumb
         * @return {?}
         */
        BreadcrumbService.prototype.getBreadcrumbIndexes = /**
         * @private
         * @param {?} breadcrumb
         * @return {?}
         */
            function (breadcrumb) {
                var alias = breadcrumb.alias, routeLink = breadcrumb.routeLink, routeRegex = breadcrumb.routeRegex;
                /** @type {?} */
                var indexMap = {};
                // identify macthing breadcrumb and store item
                if (alias) {
                    indexMap = this.getBreadcrumbIndexesByType('alias', alias);
                }
                else if (routeLink) {
                    indexMap = this.getBreadcrumbIndexesByType('routeLink', routeLink);
                }
                else if (routeRegex) {
                    indexMap = this.getBreadcrumbIndexesByType('routeRegex', routeRegex);
                }
                return indexMap;
            };
        /**
         * @private
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        BreadcrumbService.prototype.getBreadcrumbIndexesByType = /**
         * @private
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                /** @type {?} */
                var breadcrumbItemIndex;
                if (key !== 'routeRegex') {
                    breadcrumbItemIndex = this.currentBreadcrumbs.findIndex(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) { return value === item[key]; }));
                }
                else {
                    breadcrumbItemIndex = this.currentBreadcrumbs.findIndex(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) { return new RegExp(value).test(item.routeLink); }));
                }
                /** @type {?} */
                var storeItemIndex = this.dynamicBreadcrumbStore.findIndex(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return value === item[key]; }));
                return { breadcrumbItemIndex: breadcrumbItemIndex, storeItemIndex: storeItemIndex };
            };
        /**
         * @private
         * @param {?} path
         * @param {?} activatedRoute
         * @return {?}
         */
        BreadcrumbService.prototype.resolvePathParam = /**
         * @private
         * @param {?} path
         * @param {?} activatedRoute
         * @return {?}
         */
            function (path, activatedRoute) {
                // if the path segment is a route param, read the param value from url
                if (path.startsWith(this.pathParamPrefix)) {
                    return activatedRoute.snapshot.params[path.slice(1)];
                }
                return path;
            };
        /**
         * @private
         * @param {?} routeLink
         * @param {?} activatedRoute
         * @return {?}
         */
        BreadcrumbService.prototype.resolveQueryParam = /**
         * @private
         * @param {?} routeLink
         * @param {?} activatedRoute
         * @return {?}
         */
            function (routeLink, activatedRoute) {
                /** @type {?} */
                var previousBreadcrumb = this.previousBreadcrumbs.find(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item.routeLink === routeLink; })) || {};
                var _a = activatedRoute.snapshot, queryParams = _a.queryParams, fragment = _a.fragment;
                return {
                    queryParams: Object.keys(queryParams).length > 0 ? __assign({}, queryParams) : previousBreadcrumb.queryParams,
                    fragment: fragment || previousBreadcrumb.fragment
                };
            };
        /**
         * get empty children of a module or Component. Empty child is the one with path: ''
         * When parent and it's children (that has empty route path) define data
         * merge them both with child taking precedence
         */
        /**
         * get empty children of a module or Component. Empty child is the one with path: ''
         * When parent and it's children (that has empty route path) define data
         * merge them both with child taking precedence
         * @private
         * @param {?} routeConfig
         * @param {?} data
         * @return {?}
         */
        BreadcrumbService.prototype.mergeWithBaseChildData = /**
         * get empty children of a module or Component. Empty child is the one with path: ''
         * When parent and it's children (that has empty route path) define data
         * merge them both with child taking precedence
         * @private
         * @param {?} routeConfig
         * @param {?} data
         * @return {?}
         */
            function (routeConfig, data) {
                if (!routeConfig) {
                    return this.getBreadcrumbOptions(data);
                }
                /** @type {?} */
                var baseChild;
                if (routeConfig.loadChildren) {
                    // To handle a module with empty child route
                    baseChild = routeConfig._loadedConfig.routes.find(( /**
                     * @param {?} route
                     * @return {?}
                     */function (route) { return route.path === ''; }));
                }
                else if (routeConfig.children) {
                    // To handle a component with empty child route
                    baseChild = routeConfig.children.find(( /**
                     * @param {?} route
                     * @return {?}
                     */function (route) { return route.path === ''; }));
                }
                return baseChild && baseChild.data
                    ? this.mergeWithBaseChildData(baseChild, __assign({}, this.getBreadcrumbOptions(data), this.getBreadcrumbOptions(baseChild.data)))
                    : this.getBreadcrumbOptions(data);
            };
        /**
         * @private
         * @param {?} pathOrAlias
         * @param {?} breadcrumb
         * @return {?}
         */
        BreadcrumbService.prototype.validateArguments = /**
         * @private
         * @param {?} pathOrAlias
         * @param {?} breadcrumb
         * @return {?}
         */
            function (pathOrAlias, breadcrumb) {
                if (pathOrAlias === null || pathOrAlias === undefined) {
                    console.error('Invalid first argument. Please pass a route path or a breadcrumb alias.');
                    return false;
                }
                else if (breadcrumb === null || breadcrumb === undefined) {
                    console.error('Invalid second argument. Please pass a string or an Object with breadcrumb options.');
                    return false;
                }
                return true;
            };
        /**
         * breadcrumb can be passed a label or an options object
         * If passed as a string convert to breadcrumb options object
         */
        /**
         * breadcrumb can be passed a label or an options object
         * If passed as a string convert to breadcrumb options object
         * @private
         * @param {?} data
         * @return {?}
         */
        BreadcrumbService.prototype.getBreadcrumbOptions = /**
         * breadcrumb can be passed a label or an options object
         * If passed as a string convert to breadcrumb options object
         * @private
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var breadcrumb = data.breadcrumb;
                if (typeof breadcrumb === 'string' || !breadcrumb) {
                    breadcrumb = {
                        label: breadcrumb
                    };
                }
                return breadcrumb;
            };
        BreadcrumbService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        BreadcrumbService.ctorParameters = function () {
            return [
                { type: i1.ActivatedRoute },
                { type: i1.Router }
            ];
        };
        /** @nocollapse */ BreadcrumbService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function BreadcrumbService_Factory() { return new BreadcrumbService(i0.ɵɵinject(i1.ActivatedRoute), i0.ɵɵinject(i1.Router)); }, token: BreadcrumbService, providedIn: "root" });
        return BreadcrumbService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BreadcrumbComponent = /** @class */ (function () {
        function BreadcrumbComponent(breadcrumbService) {
            this.breadcrumbService = breadcrumbService;
            this._separator = '/';
            /**
             * If true, breadcrumb is auto generated even without any mapping label
             * Default label is same as route segment
             */
            this.autoGenerate = true;
            /**
             * By default query params will be preserved with breadcrumbs
             */
            this.preserveQueryParams = true;
            /**
             * custom class provided by consumer to increase specificity
             * This will benefit to override styles that are conflicting
             */
            this.class = '';
        }
        Object.defineProperty(BreadcrumbComponent.prototype, "separator", {
            get: /**
             * @return {?}
             */ function () {
                return this._separator;
            },
            /**
             * separator between breadcrumbs, defaults to '/'.
             * User can customize separator either by passing a String or Template
             *
             * String --> Ex: <xng-breadcrumb separator="-"> </xng-breadcrumb>
             *
             * Template --> Ex: <xng-breadcrumb [separator]="separatorTemplate"> </xng-breadcrumb>
             * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>
             */
            set: /**
             * separator between breadcrumbs, defaults to '/'.
             * User can customize separator either by passing a String or Template
             *
             * String --> Ex: <xng-breadcrumb separator="-"> </xng-breadcrumb>
             *
             * Template --> Ex: <xng-breadcrumb [separator]="separatorTemplate"> </xng-breadcrumb>
             * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value instanceof i0.TemplateRef) {
                    this.separatorTemplate = value;
                    this._separator = undefined;
                }
                else {
                    this.separatorTemplate = undefined;
                    this._separator = value || '/';
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BreadcrumbComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.subscription = this.breadcrumbService.breadcrumbs$.subscribe(( /**
                 * @param {?} breadcrumbs
                 * @return {?}
                 */function (breadcrumbs) {
                    _this.breadcrumbs = breadcrumbs
                        .map(( /**
                 * @param {?} breadcrumb
                 * @return {?}
                 */function (breadcrumb) {
                        if (!_this.preserveQueryParams) {
                            breadcrumb.routeLink = breadcrumb.routeLink.split('?')[0];
                        }
                        return breadcrumb;
                    }))
                        .filter(( /**
                 * @param {?} breadcrumb
                 * @return {?}
                 */function (breadcrumb) {
                        // Usually, breadcrumb list can contain a combination of auto generated and user specified labels
                        // this filters autogenerated labels in case of "[autoGenerate]: false"
                        if (_this.autoGenerate) {
                            return true;
                        }
                        return !breadcrumb.isAutoGeneratedLabel;
                    }));
                }));
            };
        /**
         * @return {?}
         */
        BreadcrumbComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.subscription.unsubscribe();
            };
        BreadcrumbComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'xng-breadcrumb',
                        template: "<nav aria-label=\"breadcrumb\" class=\"xng-breadcrumb-root\" [ngClass]=\"class\">\n  <ol class=\"xng-breadcrumb-list\">\n    <ng-container *ngFor=\"let breadcrumb of breadcrumbs; last as isLast; first as isFirst\">\n      <li class=\"xng-breadcrumb-item\">\n        <a\n          *ngIf=\"!isLast\"\n          [routerLink]=\"[breadcrumb.routeLink]\"\n          class=\"xng-breadcrumb-link\"\n          [ngClass]=\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\"\n          [attr.aria-disabled]=\"breadcrumb.disable\"\n          [queryParams]=\"breadcrumb.queryParams\"\n          [fragment]=\"breadcrumb.fragment\"\n        >\n          <ng-container\n            *ngTemplateOutlet=\"itemTemplate; context: { $implicit: breadcrumb.label, info: breadcrumb.info, last: isLast, first: isFirst }\"\n          ></ng-container>\n          <ng-container *ngIf=\"!itemTemplate\">{{ breadcrumb.label }}</ng-container>\n        </a>\n\n        <label *ngIf=\"isLast\" class=\"xng-breadcrumb-trail\">\n          <ng-container\n            *ngTemplateOutlet=\"itemTemplate; context: { $implicit: breadcrumb.label, info: breadcrumb.info, last: isLast, first: isFirst }\"\n          ></ng-container>\n          <ng-container *ngIf=\"!itemTemplate\">{{ breadcrumb.label }}</ng-container>\n        </label>\n      </li>\n\n      <li *ngIf=\"!isLast\" class=\"xng-breadcrumb-separator\" aria-hidden=\"true\" role=\"separator\">\n        <ng-container *ngTemplateOutlet=\"separatorTemplate\"></ng-container>\n        <ng-container *ngIf=\"!separatorTemplate\">{{ separator }}</ng-container>\n      </li>\n    </ng-container>\n  </ol>\n</nav>\n",
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [".xng-breadcrumb-root{margin:0;color:rgba(0,0,0,.6)}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:rgba(0,0,0,.9)}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;margin-left:8px;margin-right:8px}"]
                    }] }
        ];
        /** @nocollapse */
        BreadcrumbComponent.ctorParameters = function () {
            return [
                { type: BreadcrumbService }
            ];
        };
        BreadcrumbComponent.propDecorators = {
            itemTemplate: [{ type: i0.ContentChild, args: [BreadcrumbItemDirective, { static: false, read: i0.TemplateRef },] }],
            autoGenerate: [{ type: i0.Input }],
            preserveQueryParams: [{ type: i0.Input }],
            class: [{ type: i0.Input }],
            separator: [{ type: i0.Input, args: ['separator',] }]
        };
        return BreadcrumbComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BreadcrumbModule = /** @class */ (function () {
        function BreadcrumbModule() {
        }
        BreadcrumbModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [BreadcrumbComponent, BreadcrumbItemDirective],
                        imports: [common.CommonModule, i1.RouterModule],
                        exports: [BreadcrumbComponent, BreadcrumbItemDirective]
                    },] }
        ];
        return BreadcrumbModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.BreadcrumbItemDirective = BreadcrumbItemDirective;
    exports.BreadcrumbComponent = BreadcrumbComponent;
    exports.BreadcrumbModule = BreadcrumbModule;
    exports.BreadcrumbService = BreadcrumbService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=xng-breadcrumb.umd.js.map