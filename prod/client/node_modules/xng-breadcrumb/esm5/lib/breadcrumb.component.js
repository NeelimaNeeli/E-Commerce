/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, Input, TemplateRef, ViewEncapsulation } from '@angular/core';
import { BreadcrumbItemDirective } from './breadcrumb-item.directive';
import { BreadcrumbService } from './breadcrumb.service';
var BreadcrumbComponent = /** @class */ (function () {
    function BreadcrumbComponent(breadcrumbService) {
        this.breadcrumbService = breadcrumbService;
        this._separator = '/';
        /**
         * If true, breadcrumb is auto generated even without any mapping label
         * Default label is same as route segment
         */
        this.autoGenerate = true;
        /**
         * By default query params will be preserved with breadcrumbs
         */
        this.preserveQueryParams = true;
        /**
         * custom class provided by consumer to increase specificity
         * This will benefit to override styles that are conflicting
         */
        this.class = '';
    }
    Object.defineProperty(BreadcrumbComponent.prototype, "separator", {
        get: /**
         * @return {?}
         */
        function () {
            return this._separator;
        },
        /**
         * separator between breadcrumbs, defaults to '/'.
         * User can customize separator either by passing a String or Template
         *
         * String --> Ex: <xng-breadcrumb separator="-"> </xng-breadcrumb>
         *
         * Template --> Ex: <xng-breadcrumb [separator]="separatorTemplate"> </xng-breadcrumb>
         * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>
         */
        set: /**
         * separator between breadcrumbs, defaults to '/'.
         * User can customize separator either by passing a String or Template
         *
         * String --> Ex: <xng-breadcrumb separator="-"> </xng-breadcrumb>
         *
         * Template --> Ex: <xng-breadcrumb [separator]="separatorTemplate"> </xng-breadcrumb>
         * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.separatorTemplate = value;
                this._separator = undefined;
            }
            else {
                this.separatorTemplate = undefined;
                this._separator = value || '/';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BreadcrumbComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscription = this.breadcrumbService.breadcrumbs$.subscribe((/**
         * @param {?} breadcrumbs
         * @return {?}
         */
        function (breadcrumbs) {
            _this.breadcrumbs = breadcrumbs
                .map((/**
             * @param {?} breadcrumb
             * @return {?}
             */
            function (breadcrumb) {
                if (!_this.preserveQueryParams) {
                    breadcrumb.routeLink = breadcrumb.routeLink.split('?')[0];
                }
                return breadcrumb;
            }))
                .filter((/**
             * @param {?} breadcrumb
             * @return {?}
             */
            function (breadcrumb) {
                // Usually, breadcrumb list can contain a combination of auto generated and user specified labels
                // this filters autogenerated labels in case of "[autoGenerate]: false"
                if (_this.autoGenerate) {
                    return true;
                }
                return !breadcrumb.isAutoGeneratedLabel;
            }));
        }));
    };
    /**
     * @return {?}
     */
    BreadcrumbComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscription.unsubscribe();
    };
    BreadcrumbComponent.decorators = [
        { type: Component, args: [{
                    selector: 'xng-breadcrumb',
                    template: "<nav aria-label=\"breadcrumb\" class=\"xng-breadcrumb-root\" [ngClass]=\"class\">\n  <ol class=\"xng-breadcrumb-list\">\n    <ng-container *ngFor=\"let breadcrumb of breadcrumbs; last as isLast; first as isFirst\">\n      <li class=\"xng-breadcrumb-item\">\n        <a\n          *ngIf=\"!isLast\"\n          [routerLink]=\"[breadcrumb.routeLink]\"\n          class=\"xng-breadcrumb-link\"\n          [ngClass]=\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\"\n          [attr.aria-disabled]=\"breadcrumb.disable\"\n          [queryParams]=\"breadcrumb.queryParams\"\n          [fragment]=\"breadcrumb.fragment\"\n        >\n          <ng-container\n            *ngTemplateOutlet=\"itemTemplate; context: { $implicit: breadcrumb.label, info: breadcrumb.info, last: isLast, first: isFirst }\"\n          ></ng-container>\n          <ng-container *ngIf=\"!itemTemplate\">{{ breadcrumb.label }}</ng-container>\n        </a>\n\n        <label *ngIf=\"isLast\" class=\"xng-breadcrumb-trail\">\n          <ng-container\n            *ngTemplateOutlet=\"itemTemplate; context: { $implicit: breadcrumb.label, info: breadcrumb.info, last: isLast, first: isFirst }\"\n          ></ng-container>\n          <ng-container *ngIf=\"!itemTemplate\">{{ breadcrumb.label }}</ng-container>\n        </label>\n      </li>\n\n      <li *ngIf=\"!isLast\" class=\"xng-breadcrumb-separator\" aria-hidden=\"true\" role=\"separator\">\n        <ng-container *ngTemplateOutlet=\"separatorTemplate\"></ng-container>\n        <ng-container *ngIf=\"!separatorTemplate\">{{ separator }}</ng-container>\n      </li>\n    </ng-container>\n  </ol>\n</nav>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".xng-breadcrumb-root{margin:0;color:rgba(0,0,0,.6)}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:rgba(0,0,0,.9)}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;margin-left:8px;margin-right:8px}"]
                }] }
    ];
    /** @nocollapse */
    BreadcrumbComponent.ctorParameters = function () { return [
        { type: BreadcrumbService }
    ]; };
    BreadcrumbComponent.propDecorators = {
        itemTemplate: [{ type: ContentChild, args: [BreadcrumbItemDirective, { static: false, read: TemplateRef },] }],
        autoGenerate: [{ type: Input }],
        preserveQueryParams: [{ type: Input }],
        class: [{ type: Input }],
        separator: [{ type: Input, args: ['separator',] }]
    };
    return BreadcrumbComponent;
}());
export { BreadcrumbComponent };
if (false) {
    /** @type {?} */
    BreadcrumbComponent.prototype.subscription;
    /** @type {?} */
    BreadcrumbComponent.prototype.breadcrumbs;
    /** @type {?} */
    BreadcrumbComponent.prototype.breadcrumbs$;
    /** @type {?} */
    BreadcrumbComponent.prototype.separatorTemplate;
    /**
     * @type {?}
     * @private
     */
    BreadcrumbComponent.prototype._separator;
    /**
     * Breadcrumb item can be customized with this template
     * Template context is provided label, additional info, first and last indexes
     * Use cases:
     * 1) Add an icon along with label
     * 2) i18n. {{breadcrumb | translate}} or {{breadcrumb | transloco}}
     * 3) Change text case {{breadcrumb | titlecase}}
     * @type {?}
     */
    BreadcrumbComponent.prototype.itemTemplate;
    /**
     * If true, breadcrumb is auto generated even without any mapping label
     * Default label is same as route segment
     * @type {?}
     */
    BreadcrumbComponent.prototype.autoGenerate;
    /**
     * By default query params will be preserved with breadcrumbs
     * @type {?}
     */
    BreadcrumbComponent.prototype.preserveQueryParams;
    /**
     * custom class provided by consumer to increase specificity
     * This will benefit to override styles that are conflicting
     * @type {?}
     */
    BreadcrumbComponent.prototype.class;
    /**
     * @type {?}
     * @private
     */
    BreadcrumbComponent.prototype.breadcrumbService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly94bmctYnJlYWRjcnVtYi8iLCJzb3VyY2VzIjpbImxpYi9icmVhZGNydW1iLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUd6RDtJQStERSw2QkFBb0IsaUJBQW9DO1FBQXBDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFwRGhELGVBQVUsR0FBRyxHQUFHLENBQUM7Ozs7O1FBZ0JoQixpQkFBWSxHQUFHLElBQUksQ0FBQzs7OztRQUtwQix3QkFBbUIsR0FBRyxJQUFJLENBQUM7Ozs7O1FBTTNCLFVBQUssR0FBRyxFQUFFLENBQUM7SUF5QnVDLENBQUM7SUFkNUQsc0JBQ0ksMENBQVM7Ozs7UUFTYjtZQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN6QixDQUFDO1FBckJEOzs7Ozs7OztXQVFHOzs7Ozs7Ozs7Ozs7UUFDSCxVQUNjLEtBQWlDO1lBQzdDLElBQUksS0FBSyxZQUFZLFdBQVcsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztnQkFDL0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7YUFDN0I7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztnQkFDbkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLElBQUksR0FBRyxDQUFDO2FBQ2hDO1FBQ0gsQ0FBQzs7O09BQUE7Ozs7SUFPRCxzQ0FBUTs7O0lBQVI7UUFBQSxpQkFrQkM7UUFqQkMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFBLFdBQVc7WUFDM0UsS0FBSSxDQUFDLFdBQVcsR0FBRyxXQUFXO2lCQUMzQixHQUFHOzs7O1lBQUMsVUFBQSxVQUFVO2dCQUNiLElBQUksQ0FBQyxLQUFJLENBQUMsbUJBQW1CLEVBQUU7b0JBQzdCLFVBQVUsQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzNEO2dCQUNELE9BQU8sVUFBVSxDQUFDO1lBQ3BCLENBQUMsRUFBQztpQkFDRCxNQUFNOzs7O1lBQUMsVUFBQSxVQUFVO2dCQUNoQixpR0FBaUc7Z0JBQ2pHLHVFQUF1RTtnQkFDdkUsSUFBSSxLQUFJLENBQUMsWUFBWSxFQUFFO29CQUNyQixPQUFPLElBQUksQ0FBQztpQkFDYjtnQkFDRCxPQUFPLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDO1lBQzFDLENBQUMsRUFBQyxDQUFDO1FBQ1AsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7O0lBQ0QseUNBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDOztnQkF0RkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLDZtREFBMEM7b0JBRTFDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztpQkFDdEM7Ozs7Z0JBUlEsaUJBQWlCOzs7K0JBd0J2QixZQUFZLFNBQUMsdUJBQXVCLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUU7K0JBTTFFLEtBQUs7c0NBS0wsS0FBSzt3QkFNTCxLQUFLOzRCQVdMLEtBQUssU0FBQyxXQUFXOztJQXNDcEIsMEJBQUM7Q0FBQSxBQXZGRCxJQXVGQztTQWpGWSxtQkFBbUI7OztJQUM5QiwyQ0FBMkI7O0lBQzNCLDBDQUEwQjs7SUFDMUIsMkNBQXVDOztJQUN2QyxnREFBcUM7Ozs7O0lBQ3JDLHlDQUF5Qjs7Ozs7Ozs7OztJQVV6QiwyQ0FBMEY7Ozs7OztJQU0xRiwyQ0FBNkI7Ozs7O0lBSzdCLGtEQUFvQzs7Ozs7O0lBTXBDLG9DQUFvQjs7Ozs7SUF5QlIsZ0RBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDb250ZW50Q2hpbGQsIElucHV0LCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBCcmVhZGNydW1iSXRlbURpcmVjdGl2ZSB9IGZyb20gJy4vYnJlYWRjcnVtYi1pdGVtLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBCcmVhZGNydW1iU2VydmljZSB9IGZyb20gJy4vYnJlYWRjcnVtYi5zZXJ2aWNlJztcbmltcG9ydCB7IEJyZWFkY3J1bWIgfSBmcm9tICcuL2JyZWFkY3J1bWInO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd4bmctYnJlYWRjcnVtYicsXG4gIHRlbXBsYXRlVXJsOiAnLi9icmVhZGNydW1iLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vYnJlYWRjcnVtYi5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIEJyZWFkY3J1bWJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgYnJlYWRjcnVtYnM6IEJyZWFkY3J1bWJbXTtcbiAgYnJlYWRjcnVtYnMkOiBPYnNlcnZhYmxlPEJyZWFkY3J1bWJbXT47XG4gIHNlcGFyYXRvclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgcHJpdmF0ZSBfc2VwYXJhdG9yID0gJy8nO1xuXG4gIC8qKlxuICAgKiBCcmVhZGNydW1iIGl0ZW0gY2FuIGJlIGN1c3RvbWl6ZWQgd2l0aCB0aGlzIHRlbXBsYXRlXG4gICAqIFRlbXBsYXRlIGNvbnRleHQgaXMgcHJvdmlkZWQgbGFiZWwsIGFkZGl0aW9uYWwgaW5mbywgZmlyc3QgYW5kIGxhc3QgaW5kZXhlc1xuICAgKiBVc2UgY2FzZXM6XG4gICAqIDEpIEFkZCBhbiBpY29uIGFsb25nIHdpdGggbGFiZWxcbiAgICogMikgaTE4bi4ge3ticmVhZGNydW1iIHwgdHJhbnNsYXRlfX0gb3Ige3ticmVhZGNydW1iIHwgdHJhbnNsb2NvfX1cbiAgICogMykgQ2hhbmdlIHRleHQgY2FzZSB7e2JyZWFkY3J1bWIgfCB0aXRsZWNhc2V9fVxuICAgKi9cbiAgQENvbnRlbnRDaGlsZChCcmVhZGNydW1iSXRlbURpcmVjdGl2ZSwgeyBzdGF0aWM6IGZhbHNlLCByZWFkOiBUZW1wbGF0ZVJlZiB9KSBpdGVtVGVtcGxhdGU7XG5cbiAgLyoqXG4gICAqIElmIHRydWUsIGJyZWFkY3J1bWIgaXMgYXV0byBnZW5lcmF0ZWQgZXZlbiB3aXRob3V0IGFueSBtYXBwaW5nIGxhYmVsXG4gICAqIERlZmF1bHQgbGFiZWwgaXMgc2FtZSBhcyByb3V0ZSBzZWdtZW50XG4gICAqL1xuICBASW5wdXQoKSBhdXRvR2VuZXJhdGUgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHF1ZXJ5IHBhcmFtcyB3aWxsIGJlIHByZXNlcnZlZCB3aXRoIGJyZWFkY3J1bWJzXG4gICAqL1xuICBASW5wdXQoKSBwcmVzZXJ2ZVF1ZXJ5UGFyYW1zID0gdHJ1ZTtcblxuICAvKipcbiAgICogY3VzdG9tIGNsYXNzIHByb3ZpZGVkIGJ5IGNvbnN1bWVyIHRvIGluY3JlYXNlIHNwZWNpZmljaXR5XG4gICAqIFRoaXMgd2lsbCBiZW5lZml0IHRvIG92ZXJyaWRlIHN0eWxlcyB0aGF0IGFyZSBjb25mbGljdGluZ1xuICAgKi9cbiAgQElucHV0KCkgY2xhc3MgPSAnJztcblxuICAvKipcbiAgICogc2VwYXJhdG9yIGJldHdlZW4gYnJlYWRjcnVtYnMsIGRlZmF1bHRzIHRvICcvJy5cbiAgICogVXNlciBjYW4gY3VzdG9taXplIHNlcGFyYXRvciBlaXRoZXIgYnkgcGFzc2luZyBhIFN0cmluZyBvciBUZW1wbGF0ZVxuICAgKlxuICAgKiBTdHJpbmcgLS0+IEV4OiA8eG5nLWJyZWFkY3J1bWIgc2VwYXJhdG9yPVwiLVwiPiA8L3huZy1icmVhZGNydW1iPlxuICAgKlxuICAgKiBUZW1wbGF0ZSAtLT4gRXg6IDx4bmctYnJlYWRjcnVtYiBbc2VwYXJhdG9yXT1cInNlcGFyYXRvclRlbXBsYXRlXCI+IDwveG5nLWJyZWFkY3J1bWI+XG4gICAqIDxuZy10ZW1wbGF0ZSAjc2VwYXJhdG9yVGVtcGxhdGU+PG1hdC1pY29uPmFycm93X3JpZ2h0PC9tYXQtaWNvbj48L25nLXRlbXBsYXRlPlxuICAgKi9cbiAgQElucHV0KCdzZXBhcmF0b3InKVxuICBzZXQgc2VwYXJhdG9yKHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPikge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLnNlcGFyYXRvclRlbXBsYXRlID0gdmFsdWU7XG4gICAgICB0aGlzLl9zZXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VwYXJhdG9yVGVtcGxhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9zZXBhcmF0b3IgPSB2YWx1ZSB8fCAnLyc7XG4gICAgfVxuICB9XG4gIGdldCBzZXBhcmF0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlcGFyYXRvcjtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYnJlYWRjcnVtYlNlcnZpY2U6IEJyZWFkY3J1bWJTZXJ2aWNlKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5icmVhZGNydW1iU2VydmljZS5icmVhZGNydW1icyQuc3Vic2NyaWJlKGJyZWFkY3J1bWJzID0+IHtcbiAgICAgIHRoaXMuYnJlYWRjcnVtYnMgPSBicmVhZGNydW1ic1xuICAgICAgICAubWFwKGJyZWFkY3J1bWIgPT4ge1xuICAgICAgICAgIGlmICghdGhpcy5wcmVzZXJ2ZVF1ZXJ5UGFyYW1zKSB7XG4gICAgICAgICAgICBicmVhZGNydW1iLnJvdXRlTGluayA9IGJyZWFkY3J1bWIucm91dGVMaW5rLnNwbGl0KCc/JylbMF07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBicmVhZGNydW1iO1xuICAgICAgICB9KVxuICAgICAgICAuZmlsdGVyKGJyZWFkY3J1bWIgPT4ge1xuICAgICAgICAgIC8vIFVzdWFsbHksIGJyZWFkY3J1bWIgbGlzdCBjYW4gY29udGFpbiBhIGNvbWJpbmF0aW9uIG9mIGF1dG8gZ2VuZXJhdGVkIGFuZCB1c2VyIHNwZWNpZmllZCBsYWJlbHNcbiAgICAgICAgICAvLyB0aGlzIGZpbHRlcnMgYXV0b2dlbmVyYXRlZCBsYWJlbHMgaW4gY2FzZSBvZiBcIlthdXRvR2VuZXJhdGVdOiBmYWxzZVwiXG4gICAgICAgICAgaWYgKHRoaXMuYXV0b0dlbmVyYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICFicmVhZGNydW1iLmlzQXV0b0dlbmVyYXRlZExhYmVsO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=