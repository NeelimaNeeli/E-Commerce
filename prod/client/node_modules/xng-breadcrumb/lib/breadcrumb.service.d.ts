import { ActivatedRoute, Router } from '@angular/router';
import { Breadcrumb } from './breadcrumb';
import * as ɵngcc0 from '@angular/core';
export declare class BreadcrumbService {
    private activatedRoute;
    private router;
    /**
     * breadcrumb label for base OR root path. Usually, this can be set as 'Home'
     */
    private baseBreadcrumb;
    private baseHref;
    /**
     * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.
     * Breadcrumbs can be set from anywhere (component, service) in the app.
     * On every breadcrumb update check this store and use the info if available.
     */
    private dynamicBreadcrumbStore;
    /**
     * breadcrumbList for the current route
     * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected
     * If effected, update the change and emit a new stream
     */
    private currentBreadcrumbs;
    private previousBreadcrumbs;
    /**
     * Breadcrumbs observable to be subscribed by BreadcrumbComponent
     * Emits on every route change OR dynamic update of breadcrumb
     */
    private breadcrumbs;
    breadcrumbs$: import("rxjs").Observable<Breadcrumb[]>;
    private pathParamPrefix;
    private pathParamRegexIdentifier;
    private pathParamRegexReplacer;
    constructor(activatedRoute: ActivatedRoute, router: Router);
    /**
     * Update breadcrumb label or options for -
     *
     * route (complete route path). route can be passed the same way you define angular routes
     * 1) update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')
     * 2) change visibility Ex: set('/mentor/:id/edit', { skip: true })
     * 3) add info Ex: set('/mentor/:id/edit', { info: { icon: 'edit', iconColor: 'blue' } })
     * ------------------------ OR -------------------------
     *
     * alias (prefixed with '@'). breadcrumb alias is unique for a route
     * 1) update label Ex: set('@mentor', 'Enabler')
     * 2) change visibility Ex: set('@mentorEdit', { skip: true })
     * 3) add info Ex: set('@mentorEdit', { info: { icon: 'edit', iconColor: 'blue' } })
     */
    set(pathOrAlias: string, breadcrumb: string | Breadcrumb): void;
    private setBaseBreadcrumb;
    /**
     * Whenever route changes build breadcrumb list again
     */
    private detectRouteChanges;
    private prepareBreadcrumbList;
    private prepareBreadcrumbItem;
    /**
     * For a specific route, breadcrumb can be defined either on parent data OR it's child(which has empty path) data
     * When both are defined, child takes precedence
     *
     * Ex: Below we are setting breadcrumb on both parent and child.
     * So, child takes precedence and "Defined On Child" is displayed for the route 'home'
     * { path: 'home', loadChildren: './home/home.module#HomeModule' , data: {breadcrumb: "Defined On Module"}}
     *                                                AND
     * children: [
     *   { path: '', component: ShowUserComponent, data: {breadcrumb: "Defined On Child" }
     * ]
     */
    private parseRouteData;
    private getFromStore;
    /**
     * To update breadcrumb label for a route with path param, we need regex that matches route.
     * Instead of user providing regex, we help in preparing regex dynamically
     *
     * Ex: route declaration - path: '/mentor/:id'
     * breadcrumbService.set('/mentor/:id', 'Uday');
     * '/mentor/2' OR 'mentor/ada' we should use 'Uday' as label
     *
     * regex string is built, if route has path params(contains with ':')
     */
    private buildRouteRegExp;
    /**
     * Update current breadcrumb definition and emit a new stream of breadcrumbs
     * Also update the store to reuse dynamic declarations
     */
    private updateStore;
    private getBreadcrumbIndexes;
    private getBreadcrumbIndexesByType;
    private resolvePathParam;
    private resolveQueryParam;
    /**
     * get empty children of a module or Component. Empty child is the one with path: ''
     * When parent and it's children (that has empty route path) define data
     * merge them both with child taking precedence
     */
    private mergeWithBaseChildData;
    private validateArguments;
    /**
     * breadcrumb can be passed a label or an options object
     * If passed as a string convert to breadcrumb options object
     */
    private getBreadcrumbOptions;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BreadcrumbService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<BreadcrumbService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImJyZWFkY3J1bWIuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtR0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEJyZWFkY3J1bWIgfSBmcm9tICcuL2JyZWFkY3J1bWInO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQnJlYWRjcnVtYlNlcnZpY2Uge1xuICAgIHByaXZhdGUgYWN0aXZhdGVkUm91dGU7XG4gICAgcHJpdmF0ZSByb3V0ZXI7XG4gICAgLyoqXG4gICAgICogYnJlYWRjcnVtYiBsYWJlbCBmb3IgYmFzZSBPUiByb290IHBhdGguIFVzdWFsbHksIHRoaXMgY2FuIGJlIHNldCBhcyAnSG9tZSdcbiAgICAgKi9cbiAgICBwcml2YXRlIGJhc2VCcmVhZGNydW1iO1xuICAgIHByaXZhdGUgYmFzZUhyZWY7XG4gICAgLyoqXG4gICAgICogZHluYW1pY0JyZWFkY3J1bWJTdG9yZSBob2xkcyBpbmZvcm1hdGlvbiBhYm91dCBkeW5hbWljYWxseSB1cGRhdGVkIGJyZWFkY3J1bWJzLlxuICAgICAqIEJyZWFkY3J1bWJzIGNhbiBiZSBzZXQgZnJvbSBhbnl3aGVyZSAoY29tcG9uZW50LCBzZXJ2aWNlKSBpbiB0aGUgYXBwLlxuICAgICAqIE9uIGV2ZXJ5IGJyZWFkY3J1bWIgdXBkYXRlIGNoZWNrIHRoaXMgc3RvcmUgYW5kIHVzZSB0aGUgaW5mbyBpZiBhdmFpbGFibGUuXG4gICAgICovXG4gICAgcHJpdmF0ZSBkeW5hbWljQnJlYWRjcnVtYlN0b3JlO1xuICAgIC8qKlxuICAgICAqIGJyZWFkY3J1bWJMaXN0IGZvciB0aGUgY3VycmVudCByb3V0ZVxuICAgICAqIFdoZW4gYnJlYWRjcnVtYiBpbmZvIGlzIGNoYW5nZWQgZHluYW1pY2FsbHksIGNoZWNrIGlmIHRoZSBjdXJyZW50QnJlYWRjcnVtYnMgaXMgZWZmZWN0ZWRcbiAgICAgKiBJZiBlZmZlY3RlZCwgdXBkYXRlIHRoZSBjaGFuZ2UgYW5kIGVtaXQgYSBuZXcgc3RyZWFtXG4gICAgICovXG4gICAgcHJpdmF0ZSBjdXJyZW50QnJlYWRjcnVtYnM7XG4gICAgcHJpdmF0ZSBwcmV2aW91c0JyZWFkY3J1bWJzO1xuICAgIC8qKlxuICAgICAqIEJyZWFkY3J1bWJzIG9ic2VydmFibGUgdG8gYmUgc3Vic2NyaWJlZCBieSBCcmVhZGNydW1iQ29tcG9uZW50XG4gICAgICogRW1pdHMgb24gZXZlcnkgcm91dGUgY2hhbmdlIE9SIGR5bmFtaWMgdXBkYXRlIG9mIGJyZWFkY3J1bWJcbiAgICAgKi9cbiAgICBwcml2YXRlIGJyZWFkY3J1bWJzO1xuICAgIGJyZWFkY3J1bWJzJDogaW1wb3J0KFwicnhqc1wiKS5PYnNlcnZhYmxlPEJyZWFkY3J1bWJbXT47XG4gICAgcHJpdmF0ZSBwYXRoUGFyYW1QcmVmaXg7XG4gICAgcHJpdmF0ZSBwYXRoUGFyYW1SZWdleElkZW50aWZpZXI7XG4gICAgcHJpdmF0ZSBwYXRoUGFyYW1SZWdleFJlcGxhY2VyO1xuICAgIGNvbnN0cnVjdG9yKGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSwgcm91dGVyOiBSb3V0ZXIpO1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBicmVhZGNydW1iIGxhYmVsIG9yIG9wdGlvbnMgZm9yIC1cbiAgICAgKlxuICAgICAqIHJvdXRlIChjb21wbGV0ZSByb3V0ZSBwYXRoKS4gcm91dGUgY2FuIGJlIHBhc3NlZCB0aGUgc2FtZSB3YXkgeW91IGRlZmluZSBhbmd1bGFyIHJvdXRlc1xuICAgICAqIDEpIHVwZGF0ZSBsYWJlbCBFeDogc2V0KCcvbWVudG9yJywgJ01lbnRvcicpLCBzZXQoJy9tZW50b3IvOmlkJywgJ01lbnRvciBEZXRhaWxzJylcbiAgICAgKiAyKSBjaGFuZ2UgdmlzaWJpbGl0eSBFeDogc2V0KCcvbWVudG9yLzppZC9lZGl0JywgeyBza2lwOiB0cnVlIH0pXG4gICAgICogMykgYWRkIGluZm8gRXg6IHNldCgnL21lbnRvci86aWQvZWRpdCcsIHsgaW5mbzogeyBpY29uOiAnZWRpdCcsIGljb25Db2xvcjogJ2JsdWUnIH0gfSlcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gT1IgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqXG4gICAgICogYWxpYXMgKHByZWZpeGVkIHdpdGggJ0AnKS4gYnJlYWRjcnVtYiBhbGlhcyBpcyB1bmlxdWUgZm9yIGEgcm91dGVcbiAgICAgKiAxKSB1cGRhdGUgbGFiZWwgRXg6IHNldCgnQG1lbnRvcicsICdFbmFibGVyJylcbiAgICAgKiAyKSBjaGFuZ2UgdmlzaWJpbGl0eSBFeDogc2V0KCdAbWVudG9yRWRpdCcsIHsgc2tpcDogdHJ1ZSB9KVxuICAgICAqIDMpIGFkZCBpbmZvIEV4OiBzZXQoJ0BtZW50b3JFZGl0JywgeyBpbmZvOiB7IGljb246ICdlZGl0JywgaWNvbkNvbG9yOiAnYmx1ZScgfSB9KVxuICAgICAqL1xuICAgIHNldChwYXRoT3JBbGlhczogc3RyaW5nLCBicmVhZGNydW1iOiBzdHJpbmcgfCBCcmVhZGNydW1iKTogdm9pZDtcbiAgICBwcml2YXRlIHNldEJhc2VCcmVhZGNydW1iO1xuICAgIC8qKlxuICAgICAqIFdoZW5ldmVyIHJvdXRlIGNoYW5nZXMgYnVpbGQgYnJlYWRjcnVtYiBsaXN0IGFnYWluXG4gICAgICovXG4gICAgcHJpdmF0ZSBkZXRlY3RSb3V0ZUNoYW5nZXM7XG4gICAgcHJpdmF0ZSBwcmVwYXJlQnJlYWRjcnVtYkxpc3Q7XG4gICAgcHJpdmF0ZSBwcmVwYXJlQnJlYWRjcnVtYkl0ZW07XG4gICAgLyoqXG4gICAgICogRm9yIGEgc3BlY2lmaWMgcm91dGUsIGJyZWFkY3J1bWIgY2FuIGJlIGRlZmluZWQgZWl0aGVyIG9uIHBhcmVudCBkYXRhIE9SIGl0J3MgY2hpbGQod2hpY2ggaGFzIGVtcHR5IHBhdGgpIGRhdGFcbiAgICAgKiBXaGVuIGJvdGggYXJlIGRlZmluZWQsIGNoaWxkIHRha2VzIHByZWNlZGVuY2VcbiAgICAgKlxuICAgICAqIEV4OiBCZWxvdyB3ZSBhcmUgc2V0dGluZyBicmVhZGNydW1iIG9uIGJvdGggcGFyZW50IGFuZCBjaGlsZC5cbiAgICAgKiBTbywgY2hpbGQgdGFrZXMgcHJlY2VkZW5jZSBhbmQgXCJEZWZpbmVkIE9uIENoaWxkXCIgaXMgZGlzcGxheWVkIGZvciB0aGUgcm91dGUgJ2hvbWUnXG4gICAgICogeyBwYXRoOiAnaG9tZScsIGxvYWRDaGlsZHJlbjogJy4vaG9tZS9ob21lLm1vZHVsZSNIb21lTW9kdWxlJyAsIGRhdGE6IHticmVhZGNydW1iOiBcIkRlZmluZWQgT24gTW9kdWxlXCJ9fVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQU5EXG4gICAgICogY2hpbGRyZW46IFtcbiAgICAgKiAgIHsgcGF0aDogJycsIGNvbXBvbmVudDogU2hvd1VzZXJDb21wb25lbnQsIGRhdGE6IHticmVhZGNydW1iOiBcIkRlZmluZWQgT24gQ2hpbGRcIiB9XG4gICAgICogXVxuICAgICAqL1xuICAgIHByaXZhdGUgcGFyc2VSb3V0ZURhdGE7XG4gICAgcHJpdmF0ZSBnZXRGcm9tU3RvcmU7XG4gICAgLyoqXG4gICAgICogVG8gdXBkYXRlIGJyZWFkY3J1bWIgbGFiZWwgZm9yIGEgcm91dGUgd2l0aCBwYXRoIHBhcmFtLCB3ZSBuZWVkIHJlZ2V4IHRoYXQgbWF0Y2hlcyByb3V0ZS5cbiAgICAgKiBJbnN0ZWFkIG9mIHVzZXIgcHJvdmlkaW5nIHJlZ2V4LCB3ZSBoZWxwIGluIHByZXBhcmluZyByZWdleCBkeW5hbWljYWxseVxuICAgICAqXG4gICAgICogRXg6IHJvdXRlIGRlY2xhcmF0aW9uIC0gcGF0aDogJy9tZW50b3IvOmlkJ1xuICAgICAqIGJyZWFkY3J1bWJTZXJ2aWNlLnNldCgnL21lbnRvci86aWQnLCAnVWRheScpO1xuICAgICAqICcvbWVudG9yLzInIE9SICdtZW50b3IvYWRhJyB3ZSBzaG91bGQgdXNlICdVZGF5JyBhcyBsYWJlbFxuICAgICAqXG4gICAgICogcmVnZXggc3RyaW5nIGlzIGJ1aWx0LCBpZiByb3V0ZSBoYXMgcGF0aCBwYXJhbXMoY29udGFpbnMgd2l0aCAnOicpXG4gICAgICovXG4gICAgcHJpdmF0ZSBidWlsZFJvdXRlUmVnRXhwO1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBjdXJyZW50IGJyZWFkY3J1bWIgZGVmaW5pdGlvbiBhbmQgZW1pdCBhIG5ldyBzdHJlYW0gb2YgYnJlYWRjcnVtYnNcbiAgICAgKiBBbHNvIHVwZGF0ZSB0aGUgc3RvcmUgdG8gcmV1c2UgZHluYW1pYyBkZWNsYXJhdGlvbnNcbiAgICAgKi9cbiAgICBwcml2YXRlIHVwZGF0ZVN0b3JlO1xuICAgIHByaXZhdGUgZ2V0QnJlYWRjcnVtYkluZGV4ZXM7XG4gICAgcHJpdmF0ZSBnZXRCcmVhZGNydW1iSW5kZXhlc0J5VHlwZTtcbiAgICBwcml2YXRlIHJlc29sdmVQYXRoUGFyYW07XG4gICAgcHJpdmF0ZSByZXNvbHZlUXVlcnlQYXJhbTtcbiAgICAvKipcbiAgICAgKiBnZXQgZW1wdHkgY2hpbGRyZW4gb2YgYSBtb2R1bGUgb3IgQ29tcG9uZW50LiBFbXB0eSBjaGlsZCBpcyB0aGUgb25lIHdpdGggcGF0aDogJydcbiAgICAgKiBXaGVuIHBhcmVudCBhbmQgaXQncyBjaGlsZHJlbiAodGhhdCBoYXMgZW1wdHkgcm91dGUgcGF0aCkgZGVmaW5lIGRhdGFcbiAgICAgKiBtZXJnZSB0aGVtIGJvdGggd2l0aCBjaGlsZCB0YWtpbmcgcHJlY2VkZW5jZVxuICAgICAqL1xuICAgIHByaXZhdGUgbWVyZ2VXaXRoQmFzZUNoaWxkRGF0YTtcbiAgICBwcml2YXRlIHZhbGlkYXRlQXJndW1lbnRzO1xuICAgIC8qKlxuICAgICAqIGJyZWFkY3J1bWIgY2FuIGJlIHBhc3NlZCBhIGxhYmVsIG9yIGFuIG9wdGlvbnMgb2JqZWN0XG4gICAgICogSWYgcGFzc2VkIGFzIGEgc3RyaW5nIGNvbnZlcnQgdG8gYnJlYWRjcnVtYiBvcHRpb25zIG9iamVjdFxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0QnJlYWRjcnVtYk9wdGlvbnM7XG59XG4iXX0=