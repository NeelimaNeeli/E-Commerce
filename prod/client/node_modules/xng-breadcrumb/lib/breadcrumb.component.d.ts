import { OnInit, TemplateRef } from '@angular/core';
import { Observable, Subscription } from 'rxjs';
import { BreadcrumbService } from './breadcrumb.service';
import { Breadcrumb } from './breadcrumb';
import * as ɵngcc0 from '@angular/core';
export declare class BreadcrumbComponent implements OnInit {
    private breadcrumbService;
    subscription: Subscription;
    breadcrumbs: Breadcrumb[];
    breadcrumbs$: Observable<Breadcrumb[]>;
    separatorTemplate: TemplateRef<void>;
    private _separator;
    /**
     * Breadcrumb item can be customized with this template
     * Template context is provided label, additional info, first and last indexes
     * Use cases:
     * 1) Add an icon along with label
     * 2) i18n. {{breadcrumb | translate}} or {{breadcrumb | transloco}}
     * 3) Change text case {{breadcrumb | titlecase}}
     */
    itemTemplate: any;
    /**
     * If true, breadcrumb is auto generated even without any mapping label
     * Default label is same as route segment
     */
    autoGenerate: boolean;
    /**
     * By default query params will be preserved with breadcrumbs
     */
    preserveQueryParams: boolean;
    /**
     * custom class provided by consumer to increase specificity
     * This will benefit to override styles that are conflicting
     */
    class: string;
    /**
     * separator between breadcrumbs, defaults to '/'.
     * User can customize separator either by passing a String or Template
     *
     * String --> Ex: <xng-breadcrumb separator="-"> </xng-breadcrumb>
     *
     * Template --> Ex: <xng-breadcrumb [separator]="separatorTemplate"> </xng-breadcrumb>
     * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>
     */
    separator: string | TemplateRef<void>;
    constructor(breadcrumbService: BreadcrumbService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BreadcrumbComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BreadcrumbComponent, "xng-breadcrumb", never, {
    "autoGenerate": "autoGenerate";
    "preserveQueryParams": "preserveQueryParams";
    "class": "class";
    "separator": "separator";
}, {}, ["itemTemplate"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYnJlYWRjcnVtYi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJyZWFkY3J1bWJTZXJ2aWNlIH0gZnJvbSAnLi9icmVhZGNydW1iLnNlcnZpY2UnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYiB9IGZyb20gJy4vYnJlYWRjcnVtYic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCcmVhZGNydW1iQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwcml2YXRlIGJyZWFkY3J1bWJTZXJ2aWNlO1xuICAgIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICAgIGJyZWFkY3J1bWJzOiBCcmVhZGNydW1iW107XG4gICAgYnJlYWRjcnVtYnMkOiBPYnNlcnZhYmxlPEJyZWFkY3J1bWJbXT47XG4gICAgc2VwYXJhdG9yVGVtcGxhdGU6IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICAgIHByaXZhdGUgX3NlcGFyYXRvcjtcbiAgICAvKipcbiAgICAgKiBCcmVhZGNydW1iIGl0ZW0gY2FuIGJlIGN1c3RvbWl6ZWQgd2l0aCB0aGlzIHRlbXBsYXRlXG4gICAgICogVGVtcGxhdGUgY29udGV4dCBpcyBwcm92aWRlZCBsYWJlbCwgYWRkaXRpb25hbCBpbmZvLCBmaXJzdCBhbmQgbGFzdCBpbmRleGVzXG4gICAgICogVXNlIGNhc2VzOlxuICAgICAqIDEpIEFkZCBhbiBpY29uIGFsb25nIHdpdGggbGFiZWxcbiAgICAgKiAyKSBpMThuLiB7e2JyZWFkY3J1bWIgfCB0cmFuc2xhdGV9fSBvciB7e2JyZWFkY3J1bWIgfCB0cmFuc2xvY299fVxuICAgICAqIDMpIENoYW5nZSB0ZXh0IGNhc2Uge3ticmVhZGNydW1iIHwgdGl0bGVjYXNlfX1cbiAgICAgKi9cbiAgICBpdGVtVGVtcGxhdGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBicmVhZGNydW1iIGlzIGF1dG8gZ2VuZXJhdGVkIGV2ZW4gd2l0aG91dCBhbnkgbWFwcGluZyBsYWJlbFxuICAgICAqIERlZmF1bHQgbGFiZWwgaXMgc2FtZSBhcyByb3V0ZSBzZWdtZW50XG4gICAgICovXG4gICAgYXV0b0dlbmVyYXRlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQgcXVlcnkgcGFyYW1zIHdpbGwgYmUgcHJlc2VydmVkIHdpdGggYnJlYWRjcnVtYnNcbiAgICAgKi9cbiAgICBwcmVzZXJ2ZVF1ZXJ5UGFyYW1zOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIGN1c3RvbSBjbGFzcyBwcm92aWRlZCBieSBjb25zdW1lciB0byBpbmNyZWFzZSBzcGVjaWZpY2l0eVxuICAgICAqIFRoaXMgd2lsbCBiZW5lZml0IHRvIG92ZXJyaWRlIHN0eWxlcyB0aGF0IGFyZSBjb25mbGljdGluZ1xuICAgICAqL1xuICAgIGNsYXNzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogc2VwYXJhdG9yIGJldHdlZW4gYnJlYWRjcnVtYnMsIGRlZmF1bHRzIHRvICcvJy5cbiAgICAgKiBVc2VyIGNhbiBjdXN0b21pemUgc2VwYXJhdG9yIGVpdGhlciBieSBwYXNzaW5nIGEgU3RyaW5nIG9yIFRlbXBsYXRlXG4gICAgICpcbiAgICAgKiBTdHJpbmcgLS0+IEV4OiA8eG5nLWJyZWFkY3J1bWIgc2VwYXJhdG9yPVwiLVwiPiA8L3huZy1icmVhZGNydW1iPlxuICAgICAqXG4gICAgICogVGVtcGxhdGUgLS0+IEV4OiA8eG5nLWJyZWFkY3J1bWIgW3NlcGFyYXRvcl09XCJzZXBhcmF0b3JUZW1wbGF0ZVwiPiA8L3huZy1icmVhZGNydW1iPlxuICAgICAqIDxuZy10ZW1wbGF0ZSAjc2VwYXJhdG9yVGVtcGxhdGU+PG1hdC1pY29uPmFycm93X3JpZ2h0PC9tYXQtaWNvbj48L25nLXRlbXBsYXRlPlxuICAgICAqL1xuICAgIHNlcGFyYXRvcjogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD47XG4gICAgY29uc3RydWN0b3IoYnJlYWRjcnVtYlNlcnZpY2U6IEJyZWFkY3J1bWJTZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=