/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, Input, TemplateRef, ViewEncapsulation } from '@angular/core';
import { BreadcrumbItemDirective } from './breadcrumb-item.directive';
import { BreadcrumbService } from './breadcrumb.service';
export class BreadcrumbComponent {
    /**
     * @param {?} breadcrumbService
     */
    constructor(breadcrumbService) {
        this.breadcrumbService = breadcrumbService;
        this._separator = '/';
        /**
         * If true, breadcrumb is auto generated even without any mapping label
         * Default label is same as route segment
         */
        this.autoGenerate = true;
        /**
         * By default query params will be preserved with breadcrumbs
         */
        this.preserveQueryParams = true;
        /**
         * custom class provided by consumer to increase specificity
         * This will benefit to override styles that are conflicting
         */
        this.class = '';
    }
    /**
     * separator between breadcrumbs, defaults to '/'.
     * User can customize separator either by passing a String or Template
     *
     * String --> Ex: <xng-breadcrumb separator="-"> </xng-breadcrumb>
     *
     * Template --> Ex: <xng-breadcrumb [separator]="separatorTemplate"> </xng-breadcrumb>
     * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>
     * @param {?} value
     * @return {?}
     */
    set separator(value) {
        if (value instanceof TemplateRef) {
            this.separatorTemplate = value;
            this._separator = undefined;
        }
        else {
            this.separatorTemplate = undefined;
            this._separator = value || '/';
        }
    }
    /**
     * @return {?}
     */
    get separator() {
        return this._separator;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscription = this.breadcrumbService.breadcrumbs$.subscribe((/**
         * @param {?} breadcrumbs
         * @return {?}
         */
        breadcrumbs => {
            this.breadcrumbs = breadcrumbs
                .map((/**
             * @param {?} breadcrumb
             * @return {?}
             */
            breadcrumb => {
                if (!this.preserveQueryParams) {
                    breadcrumb.routeLink = breadcrumb.routeLink.split('?')[0];
                }
                return breadcrumb;
            }))
                .filter((/**
             * @param {?} breadcrumb
             * @return {?}
             */
            breadcrumb => {
                // Usually, breadcrumb list can contain a combination of auto generated and user specified labels
                // this filters autogenerated labels in case of "[autoGenerate]: false"
                if (this.autoGenerate) {
                    return true;
                }
                return !breadcrumb.isAutoGeneratedLabel;
            }));
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
BreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'xng-breadcrumb',
                template: "<nav aria-label=\"breadcrumb\" class=\"xng-breadcrumb-root\" [ngClass]=\"class\">\n  <ol class=\"xng-breadcrumb-list\">\n    <ng-container *ngFor=\"let breadcrumb of breadcrumbs; last as isLast; first as isFirst\">\n      <li class=\"xng-breadcrumb-item\">\n        <a\n          *ngIf=\"!isLast\"\n          [routerLink]=\"[breadcrumb.routeLink]\"\n          class=\"xng-breadcrumb-link\"\n          [ngClass]=\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\"\n          [attr.aria-disabled]=\"breadcrumb.disable\"\n          [queryParams]=\"breadcrumb.queryParams\"\n          [fragment]=\"breadcrumb.fragment\"\n        >\n          <ng-container\n            *ngTemplateOutlet=\"itemTemplate; context: { $implicit: breadcrumb.label, info: breadcrumb.info, last: isLast, first: isFirst }\"\n          ></ng-container>\n          <ng-container *ngIf=\"!itemTemplate\">{{ breadcrumb.label }}</ng-container>\n        </a>\n\n        <label *ngIf=\"isLast\" class=\"xng-breadcrumb-trail\">\n          <ng-container\n            *ngTemplateOutlet=\"itemTemplate; context: { $implicit: breadcrumb.label, info: breadcrumb.info, last: isLast, first: isFirst }\"\n          ></ng-container>\n          <ng-container *ngIf=\"!itemTemplate\">{{ breadcrumb.label }}</ng-container>\n        </label>\n      </li>\n\n      <li *ngIf=\"!isLast\" class=\"xng-breadcrumb-separator\" aria-hidden=\"true\" role=\"separator\">\n        <ng-container *ngTemplateOutlet=\"separatorTemplate\"></ng-container>\n        <ng-container *ngIf=\"!separatorTemplate\">{{ separator }}</ng-container>\n      </li>\n    </ng-container>\n  </ol>\n</nav>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".xng-breadcrumb-root{margin:0;color:rgba(0,0,0,.6)}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:rgba(0,0,0,.9)}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;margin-left:8px;margin-right:8px}"]
            }] }
];
/** @nocollapse */
BreadcrumbComponent.ctorParameters = () => [
    { type: BreadcrumbService }
];
BreadcrumbComponent.propDecorators = {
    itemTemplate: [{ type: ContentChild, args: [BreadcrumbItemDirective, { static: false, read: TemplateRef },] }],
    autoGenerate: [{ type: Input }],
    preserveQueryParams: [{ type: Input }],
    class: [{ type: Input }],
    separator: [{ type: Input, args: ['separator',] }]
};
if (false) {
    /** @type {?} */
    BreadcrumbComponent.prototype.subscription;
    /** @type {?} */
    BreadcrumbComponent.prototype.breadcrumbs;
    /** @type {?} */
    BreadcrumbComponent.prototype.breadcrumbs$;
    /** @type {?} */
    BreadcrumbComponent.prototype.separatorTemplate;
    /**
     * @type {?}
     * @private
     */
    BreadcrumbComponent.prototype._separator;
    /**
     * Breadcrumb item can be customized with this template
     * Template context is provided label, additional info, first and last indexes
     * Use cases:
     * 1) Add an icon along with label
     * 2) i18n. {{breadcrumb | translate}} or {{breadcrumb | transloco}}
     * 3) Change text case {{breadcrumb | titlecase}}
     * @type {?}
     */
    BreadcrumbComponent.prototype.itemTemplate;
    /**
     * If true, breadcrumb is auto generated even without any mapping label
     * Default label is same as route segment
     * @type {?}
     */
    BreadcrumbComponent.prototype.autoGenerate;
    /**
     * By default query params will be preserved with breadcrumbs
     * @type {?}
     */
    BreadcrumbComponent.prototype.preserveQueryParams;
    /**
     * custom class provided by consumer to increase specificity
     * This will benefit to override styles that are conflicting
     * @type {?}
     */
    BreadcrumbComponent.prototype.class;
    /**
     * @type {?}
     * @private
     */
    BreadcrumbComponent.prototype.breadcrumbService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly94bmctYnJlYWRjcnVtYi8iLCJzb3VyY2VzIjpbImxpYi9icmVhZGNydW1iLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQVN6RCxNQUFNLE9BQU8sbUJBQW1COzs7O0lBeUQ5QixZQUFvQixpQkFBb0M7UUFBcEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQXBEaEQsZUFBVSxHQUFHLEdBQUcsQ0FBQzs7Ozs7UUFnQmhCLGlCQUFZLEdBQUcsSUFBSSxDQUFDOzs7O1FBS3BCLHdCQUFtQixHQUFHLElBQUksQ0FBQzs7Ozs7UUFNM0IsVUFBSyxHQUFHLEVBQUUsQ0FBQztJQXlCdUMsQ0FBQzs7Ozs7Ozs7Ozs7O0lBZDVELElBQ0ksU0FBUyxDQUFDLEtBQWlDO1FBQzdDLElBQUksS0FBSyxZQUFZLFdBQVcsRUFBRTtZQUNoQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO1lBQy9CLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1NBQzdCO2FBQU07WUFDTCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO1lBQ25DLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxJQUFJLEdBQUcsQ0FBQztTQUNoQztJQUNILENBQUM7Ozs7SUFDRCxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQzs7OztJQUlELFFBQVE7UUFDTixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsU0FBUzs7OztRQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQzlFLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVztpQkFDM0IsR0FBRzs7OztZQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFO29CQUM3QixVQUFVLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUMzRDtnQkFDRCxPQUFPLFVBQVUsQ0FBQztZQUNwQixDQUFDLEVBQUM7aUJBQ0QsTUFBTTs7OztZQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUNuQixpR0FBaUc7Z0JBQ2pHLHVFQUF1RTtnQkFDdkUsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO29CQUNyQixPQUFPLElBQUksQ0FBQztpQkFDYjtnQkFDRCxPQUFPLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDO1lBQzFDLENBQUMsRUFBQyxDQUFDO1FBQ1AsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7O0lBQ0QsV0FBVztRQUNULElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbEMsQ0FBQzs7O1lBdEZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQiw2bURBQTBDO2dCQUUxQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7YUFDdEM7Ozs7WUFSUSxpQkFBaUI7OzsyQkF3QnZCLFlBQVksU0FBQyx1QkFBdUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRTsyQkFNMUUsS0FBSztrQ0FLTCxLQUFLO29CQU1MLEtBQUs7d0JBV0wsS0FBSyxTQUFDLFdBQVc7Ozs7SUExQ2xCLDJDQUEyQjs7SUFDM0IsMENBQTBCOztJQUMxQiwyQ0FBdUM7O0lBQ3ZDLGdEQUFxQzs7Ozs7SUFDckMseUNBQXlCOzs7Ozs7Ozs7O0lBVXpCLDJDQUEwRjs7Ozs7O0lBTTFGLDJDQUE2Qjs7Ozs7SUFLN0Isa0RBQW9DOzs7Ozs7SUFNcEMsb0NBQW9COzs7OztJQXlCUixnREFBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgSW5wdXQsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJyZWFkY3J1bWJJdGVtRGlyZWN0aXZlIH0gZnJvbSAnLi9icmVhZGNydW1iLWl0ZW0uZGlyZWN0aXZlJztcbmltcG9ydCB7IEJyZWFkY3J1bWJTZXJ2aWNlIH0gZnJvbSAnLi9icmVhZGNydW1iLnNlcnZpY2UnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYiB9IGZyb20gJy4vYnJlYWRjcnVtYic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3huZy1icmVhZGNydW1iJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2JyZWFkY3J1bWIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9icmVhZGNydW1iLmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgQnJlYWRjcnVtYkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBicmVhZGNydW1iczogQnJlYWRjcnVtYltdO1xuICBicmVhZGNydW1icyQ6IE9ic2VydmFibGU8QnJlYWRjcnVtYltdPjtcbiAgc2VwYXJhdG9yVGVtcGxhdGU6IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBwcml2YXRlIF9zZXBhcmF0b3IgPSAnLyc7XG5cbiAgLyoqXG4gICAqIEJyZWFkY3J1bWIgaXRlbSBjYW4gYmUgY3VzdG9taXplZCB3aXRoIHRoaXMgdGVtcGxhdGVcbiAgICogVGVtcGxhdGUgY29udGV4dCBpcyBwcm92aWRlZCBsYWJlbCwgYWRkaXRpb25hbCBpbmZvLCBmaXJzdCBhbmQgbGFzdCBpbmRleGVzXG4gICAqIFVzZSBjYXNlczpcbiAgICogMSkgQWRkIGFuIGljb24gYWxvbmcgd2l0aCBsYWJlbFxuICAgKiAyKSBpMThuLiB7e2JyZWFkY3J1bWIgfCB0cmFuc2xhdGV9fSBvciB7e2JyZWFkY3J1bWIgfCB0cmFuc2xvY299fVxuICAgKiAzKSBDaGFuZ2UgdGV4dCBjYXNlIHt7YnJlYWRjcnVtYiB8IHRpdGxlY2FzZX19XG4gICAqL1xuICBAQ29udGVudENoaWxkKEJyZWFkY3J1bWJJdGVtRGlyZWN0aXZlLCB7IHN0YXRpYzogZmFsc2UsIHJlYWQ6IFRlbXBsYXRlUmVmIH0pIGl0ZW1UZW1wbGF0ZTtcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgYnJlYWRjcnVtYiBpcyBhdXRvIGdlbmVyYXRlZCBldmVuIHdpdGhvdXQgYW55IG1hcHBpbmcgbGFiZWxcbiAgICogRGVmYXVsdCBsYWJlbCBpcyBzYW1lIGFzIHJvdXRlIHNlZ21lbnRcbiAgICovXG4gIEBJbnB1dCgpIGF1dG9HZW5lcmF0ZSA9IHRydWU7XG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgcXVlcnkgcGFyYW1zIHdpbGwgYmUgcHJlc2VydmVkIHdpdGggYnJlYWRjcnVtYnNcbiAgICovXG4gIEBJbnB1dCgpIHByZXNlcnZlUXVlcnlQYXJhbXMgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBjdXN0b20gY2xhc3MgcHJvdmlkZWQgYnkgY29uc3VtZXIgdG8gaW5jcmVhc2Ugc3BlY2lmaWNpdHlcbiAgICogVGhpcyB3aWxsIGJlbmVmaXQgdG8gb3ZlcnJpZGUgc3R5bGVzIHRoYXQgYXJlIGNvbmZsaWN0aW5nXG4gICAqL1xuICBASW5wdXQoKSBjbGFzcyA9ICcnO1xuXG4gIC8qKlxuICAgKiBzZXBhcmF0b3IgYmV0d2VlbiBicmVhZGNydW1icywgZGVmYXVsdHMgdG8gJy8nLlxuICAgKiBVc2VyIGNhbiBjdXN0b21pemUgc2VwYXJhdG9yIGVpdGhlciBieSBwYXNzaW5nIGEgU3RyaW5nIG9yIFRlbXBsYXRlXG4gICAqXG4gICAqIFN0cmluZyAtLT4gRXg6IDx4bmctYnJlYWRjcnVtYiBzZXBhcmF0b3I9XCItXCI+IDwveG5nLWJyZWFkY3J1bWI+XG4gICAqXG4gICAqIFRlbXBsYXRlIC0tPiBFeDogPHhuZy1icmVhZGNydW1iIFtzZXBhcmF0b3JdPVwic2VwYXJhdG9yVGVtcGxhdGVcIj4gPC94bmctYnJlYWRjcnVtYj5cbiAgICogPG5nLXRlbXBsYXRlICNzZXBhcmF0b3JUZW1wbGF0ZT48bWF0LWljb24+YXJyb3dfcmlnaHQ8L21hdC1pY29uPjwvbmctdGVtcGxhdGU+XG4gICAqL1xuICBASW5wdXQoJ3NlcGFyYXRvcicpXG4gIHNldCBzZXBhcmF0b3IodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+KSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpIHtcbiAgICAgIHRoaXMuc2VwYXJhdG9yVGVtcGxhdGUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuX3NlcGFyYXRvciA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXBhcmF0b3JUZW1wbGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3NlcGFyYXRvciA9IHZhbHVlIHx8ICcvJztcbiAgICB9XG4gIH1cbiAgZ2V0IHNlcGFyYXRvcigpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VwYXJhdG9yO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBicmVhZGNydW1iU2VydmljZTogQnJlYWRjcnVtYlNlcnZpY2UpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLmJyZWFkY3J1bWJTZXJ2aWNlLmJyZWFkY3J1bWJzJC5zdWJzY3JpYmUoYnJlYWRjcnVtYnMgPT4ge1xuICAgICAgdGhpcy5icmVhZGNydW1icyA9IGJyZWFkY3J1bWJzXG4gICAgICAgIC5tYXAoYnJlYWRjcnVtYiA9PiB7XG4gICAgICAgICAgaWYgKCF0aGlzLnByZXNlcnZlUXVlcnlQYXJhbXMpIHtcbiAgICAgICAgICAgIGJyZWFkY3J1bWIucm91dGVMaW5rID0gYnJlYWRjcnVtYi5yb3V0ZUxpbmsuc3BsaXQoJz8nKVswXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGJyZWFkY3J1bWI7XG4gICAgICAgIH0pXG4gICAgICAgIC5maWx0ZXIoYnJlYWRjcnVtYiA9PiB7XG4gICAgICAgICAgLy8gVXN1YWxseSwgYnJlYWRjcnVtYiBsaXN0IGNhbiBjb250YWluIGEgY29tYmluYXRpb24gb2YgYXV0byBnZW5lcmF0ZWQgYW5kIHVzZXIgc3BlY2lmaWVkIGxhYmVsc1xuICAgICAgICAgIC8vIHRoaXMgZmlsdGVycyBhdXRvZ2VuZXJhdGVkIGxhYmVscyBpbiBjYXNlIG9mIFwiW2F1dG9HZW5lcmF0ZV06IGZhbHNlXCJcbiAgICAgICAgICBpZiAodGhpcy5hdXRvR2VuZXJhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gIWJyZWFkY3J1bWIuaXNBdXRvR2VuZXJhdGVkTGFiZWw7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiJdfQ==